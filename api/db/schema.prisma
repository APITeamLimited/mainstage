datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.

model EntityAuthKeyPair {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  publicKey  String
  privateKey String
}

// Make user model with UUID as primary key
model User {
  id             String       @id @default(uuid())
  firstName      String
  lastName       String
  slug           String
  email          String       @unique
  createdAt      DateTime     @default(now())
  updatedAt      DateTime?    @updatedAt
  isAdmin        Boolean      @default(false)
  emailVerified  Boolean      @default(false)
  shortBio       String?
  profilePicture String?
  memberships    Membership[]

  // Password auth
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?

  emailMarketing Boolean @default(false)

  articles Article[]

  // Stripe and billing
  customerId         String?
  planInfo           PlanInfo? @relation(fields: [planInfoId], references: [id], onDelete: NoAction)
  planInfoId         String?
  subscriptionId     String?
  hadFreeTrial       Boolean   @default(false)
  freeCreditsAddedAt DateTime?
  pastDue            Boolean   @default(false)
}

model Team {
  id             String    @id @default(uuid())
  name           String
  slug           String    @unique
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @updatedAt
  shortBio       String?
  profilePicture String?

  memberships Membership[]
  invitations Invitation[]

  // Stripe and billing
  customerId         String?
  planInfo           PlanInfo? @relation(fields: [planInfoId], references: [id], onDelete: NoAction)
  planInfoId         String?
  subscriptionId     String?
  hadFreeTrial       Boolean   @default(false)
  freeCreditsAddedAt DateTime?
  pastDue            Boolean   @default(false)
}

model Membership {
  id              String    @id @default(uuid())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  team            Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId          String
  role            String
  wantsTeamEmails Boolean   @default(true)

  @@unique([userId, teamId])
}

model Invitation {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  email     String
  team      Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  role      String

  @@unique([email, teamId])
}

model Scope {
  id              String    @id @default(uuid())
  variant         String
  variantTargetId String
  role            String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt
  userId          String
  displayName     String
  profilePicture  String?
  slug            String
  planName        String

  @@unique([variant, variantTargetId, userId])
}

model Tag {
  id        String           @id @default(uuid())
  createdAt DateTime         @default(now())
  updatedAt DateTime?        @updatedAt
  name      String
  articles  TagsOnArticles[]
}

model Article {
  id                      String           @id @default(uuid())
  createdAt               DateTime         @default(now())
  updatedAt               DateTime?        @updatedAt
  title                   String
  markdown                String
  tags                    TagsOnArticles[]
  estimatedReadingMinutes Int
  previewImageSrc         String?

  author   User?   @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId String?
}

model TagsOnArticles {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  tag         Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId       String
  article     Article   @relation(fields: [blogEntryId], references: [id], onDelete: Cascade)
  blogEntryId String
}

model VerifiedDomain {
  id              String    @id @default(uuid())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt
  domain          String
  variant         String
  variantTargetId String
  txtRecord       String
  verified        Boolean   @default(false)
}

// Stripe and billing

model PlanInfo {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  isActive    Boolean   @default(true)
  name        String
  verboseName String
  description String?

  // Plan Features
  maxMembers                  Int
  maxConcurrentCloudTests     Int
  maxConcurrentScheduledTests Int

  monthlyCredits         Int
  loadZones              String[]
  maxTestDurationMinutes Int
  dataRetentionMonths    Int
  maxSimulatedUsers      Int

  // Pricing and stripe
  priceMonthlyCents Int
  priceYearlyCents  Int
  freeTrialDays     Int?
  productId         String
  yearlyPriceId     String
  monthlyPriceId    String

  teams Team[]
  users User[]
}

model CreditsPricingOption {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  isActive    Boolean   @default(true)
  name        String
  verboseName String

  // Purchase Features
  credits Int

  // Pricing and stripe
  priceCents Int
  productId  String
  priceId    String
}
