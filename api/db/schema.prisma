datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.

// Make user model with UUID as primary key
model User {
  id             String       @id @default(uuid())
  firstName      String
  lastName       String
  email          String       @unique
  createdAt      DateTime     @default(now())
  updatedAt      DateTime?
  isAdmin        Boolean      @default(false)
  emailVerified  Boolean      @default(false)
  shortBio       String?
  profilePicture String?
  memberships    Membership[]

  // Password auth
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  Article             Article[]
  emailMarketing      Boolean   @default(false)
}

model Team {
  id                         String       @id @default(uuid())
  name                       String
  slug                       String       @unique
  createdAt                  DateTime     @default(now())
  updatedAt                  DateTime?
  shortBio                   String?
  profilePicture             String?
  maxMembers                 Int          @default(10)
  memberships                Membership[]
  invitations                Invitation[]
  markedForDeletionToken     String?
  markedForDeletionExpiresAt DateTime?
}

model Membership {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  team      Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  role      String
}

model Invitation {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  email     String    @unique
  team      Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  role      String

  @@unique([email, teamId])
}

model EntityAuthKeyPair {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime?
  publicKey  String
  privateKey String
}

model Scope {
  id              String    @id @default(uuid())
  variant         String
  variantTargetId String
  role            String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime?
  userId          String
  displayName     String
  profilePicture  String?
  slug            String
}

model Tag {
  id        String           @id @default(uuid())
  createdAt DateTime         @default(now())
  updatedAt DateTime?
  name      String
  articles  TagsOnArticles[]
}

model Article {
  id                      String           @id @default(uuid())
  createdAt               DateTime         @default(now())
  updatedAt               DateTime?
  title                   String
  markdown                String
  tags                    TagsOnArticles[]
  estimatedReadingMinutes Int
  author                  User             @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId                String
  previewImageSrc         String?
}

model TagsOnArticles {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  tag         Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId       String
  article     Article   @relation(fields: [blogEntryId], references: [id], onDelete: Cascade)
  blogEntryId String
}
