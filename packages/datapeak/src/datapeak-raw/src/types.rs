// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `types.proto`

use serde::Serialize;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Sink)
pub struct Sink {
    // message fields
    // @@protoc_insertion_point(field:Sink.type)
    pub type_: ::protobuf::EnumOrUnknown<SinkType>,
    // @@protoc_insertion_point(field:Sink.labels)
    pub labels: ::std::collections::HashMap<::std::string::String, f64>,
    // special fields
    // @@protoc_insertion_point(special_field:Sink.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Sink {
    fn default() -> &'a Sink {
        <Sink as ::protobuf::Message>::default_instance()
    }
}

impl Sink {
    pub fn new() -> Sink {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &Sink| { &m.type_ },
            |m: &mut Sink| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "labels",
            |m: &Sink| { &m.labels },
            |m: &mut Sink| { &mut m.labels },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Sink>(
            "Sink",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Sink {
    const NAME: &'static str = "Sink";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                18 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            17 => value = is.read_double()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.labels.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != ::protobuf::EnumOrUnknown::new(SinkType::Counter) {
            my_size += ::protobuf::rt::int32_size(1, self.type_.value());
        }
        for (k, v) in &self.labels {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += 1 + 8;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != ::protobuf::EnumOrUnknown::new(SinkType::Counter) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        for (k, v) in &self.labels {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += 1 + 8;
            os.write_raw_varint32(18)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_double(2, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Sink {
        Sink::new()
    }

    fn clear(&mut self) {
        self.type_ = ::protobuf::EnumOrUnknown::new(SinkType::Counter);
        self.labels.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Sink {
        static instance: ::protobuf::rt::Lazy<Sink> = ::protobuf::rt::Lazy::new();
        instance.get(Sink::new)
    }
}

impl ::protobuf::MessageFull for Sink {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Sink").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Sink {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Sink {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Interval)
pub struct Interval {
    // message fields
    // @@protoc_insertion_point(field:Interval.period)
    pub period: i32,
    ///  map<metric name, value> location name is included here
    // @@protoc_insertion_point(field:Interval.sinks)
    pub sinks: ::std::collections::HashMap<::std::string::String, Sink>,
    // special fields
    // @@protoc_insertion_point(special_field:Interval.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Interval {
    fn default() -> &'a Interval {
        <Interval as ::protobuf::Message>::default_instance()
    }
}

impl Interval {
    pub fn new() -> Interval {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "period",
            |m: &Interval| { &m.period },
            |m: &mut Interval| { &mut m.period },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "sinks",
            |m: &Interval| { &m.sinks },
            |m: &mut Interval| { &mut m.sinks },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Interval>(
            "Interval",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Interval {
    const NAME: &'static str = "Interval";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.period = is.read_int32()?;
                },
                18 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.sinks.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.period != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.period);
        }
        for (k, v) in &self.sinks {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.period != 0 {
            os.write_int32(1, self.period)?;
        }
        for (k, v) in &self.sinks {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(18)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Interval {
        Interval::new()
    }

    fn clear(&mut self) {
        self.period = 0;
        self.sinks.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Interval {
        static instance: ::protobuf::rt::Lazy<Interval> = ::protobuf::rt::Lazy::new();
        instance.get(Interval::new)
    }
}

impl ::protobuf::MessageFull for Interval {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Interval").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Interval {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Interval {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ConsoleMessage)
pub struct ConsoleMessage {
    // message fields
    // @@protoc_insertion_point(field:ConsoleMessage.message)
    pub message: ::std::string::String,
    // @@protoc_insertion_point(field:ConsoleMessage.level)
    pub level: ::std::string::String,
    // @@protoc_insertion_point(field:ConsoleMessage.first_occurred)
    pub first_occurred: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:ConsoleMessage.last_occurred)
    pub last_occurred: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    ///  map<location, times occurred>
    // @@protoc_insertion_point(field:ConsoleMessage.count)
    pub count: ::std::collections::HashMap<::std::string::String, i32>,
    // special fields
    // @@protoc_insertion_point(special_field:ConsoleMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ConsoleMessage {
    fn default() -> &'a ConsoleMessage {
        <ConsoleMessage as ::protobuf::Message>::default_instance()
    }
}

impl ConsoleMessage {
    pub fn new() -> ConsoleMessage {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &ConsoleMessage| { &m.message },
            |m: &mut ConsoleMessage| { &mut m.message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "level",
            |m: &ConsoleMessage| { &m.level },
            |m: &mut ConsoleMessage| { &mut m.level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "first_occurred",
            |m: &ConsoleMessage| { &m.first_occurred },
            |m: &mut ConsoleMessage| { &mut m.first_occurred },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "last_occurred",
            |m: &ConsoleMessage| { &m.last_occurred },
            |m: &mut ConsoleMessage| { &mut m.last_occurred },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "count",
            |m: &ConsoleMessage| { &m.count },
            |m: &mut ConsoleMessage| { &mut m.count },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ConsoleMessage>(
            "ConsoleMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ConsoleMessage {
    const NAME: &'static str = "ConsoleMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.message = is.read_string()?;
                },
                18 => {
                    self.level = is.read_string()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.first_occurred)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.last_occurred)?;
                },
                42 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            16 => value = is.read_int32()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.count.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.message);
        }
        if !self.level.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.level);
        }
        if let Some(v) = self.first_occurred.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.last_occurred.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for (k, v) in &self.count {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::int32_size(2, *v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.message.is_empty() {
            os.write_string(1, &self.message)?;
        }
        if !self.level.is_empty() {
            os.write_string(2, &self.level)?;
        }
        if let Some(v) = self.first_occurred.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.last_occurred.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        for (k, v) in &self.count {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::int32_size(2, *v);
            os.write_raw_varint32(42)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_int32(2, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ConsoleMessage {
        ConsoleMessage::new()
    }

    fn clear(&mut self) {
        self.message.clear();
        self.level.clear();
        self.first_occurred.clear();
        self.last_occurred.clear();
        self.count.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ConsoleMessage {
        static instance: ::protobuf::rt::Lazy<ConsoleMessage> = ::protobuf::rt::Lazy::new();
        instance.get(ConsoleMessage::new)
    }
}

impl ::protobuf::MessageFull for ConsoleMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ConsoleMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ConsoleMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsoleMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug,Serialize)]
#[serde(rename_all = "camelCase")]
// @@protoc_insertion_point(message:Threshold)
pub struct Threshold {
    // message fields
    // @@protoc_insertion_point(field:Threshold.source)
    pub source: ::std::string::String,
    // @@protoc_insertion_point(field:Threshold.metric)
    pub metric: ::std::string::String,
    // @@protoc_insertion_point(field:Threshold.abort_on_fail)
    pub abort_on_fail: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:Threshold.delay_abort_eval)
    pub delay_abort_eval: ::std::option::Option<::std::string::String>,
    #[serde(skip_serializing)]
    // special fields
    // @@protoc_insertion_point(special_field:Threshold.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Threshold {
    fn default() -> &'a Threshold {
        <Threshold as ::protobuf::Message>::default_instance()
    }
}

impl Threshold {
    pub fn new() -> Threshold {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "source",
            |m: &Threshold| { &m.source },
            |m: &mut Threshold| { &mut m.source },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "metric",
            |m: &Threshold| { &m.metric },
            |m: &mut Threshold| { &mut m.metric },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "abort_on_fail",
            |m: &Threshold| { &m.abort_on_fail },
            |m: &mut Threshold| { &mut m.abort_on_fail },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "delay_abort_eval",
            |m: &Threshold| { &m.delay_abort_eval },
            |m: &mut Threshold| { &mut m.delay_abort_eval },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Threshold>(
            "Threshold",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Threshold {
    const NAME: &'static str = "Threshold";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.source = is.read_string()?;
                },
                18 => {
                    self.metric = is.read_string()?;
                },
                24 => {
                    self.abort_on_fail = ::std::option::Option::Some(is.read_bool()?);
                },
                34 => {
                    self.delay_abort_eval = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.source.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.source);
        }
        if !self.metric.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.metric);
        }
        if let Some(v) = self.abort_on_fail {
            my_size += 1 + 1;
        }
        if let Some(v) = self.delay_abort_eval.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.source.is_empty() {
            os.write_string(1, &self.source)?;
        }
        if !self.metric.is_empty() {
            os.write_string(2, &self.metric)?;
        }
        if let Some(v) = self.abort_on_fail {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.delay_abort_eval.as_ref() {
            os.write_string(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Threshold {
        Threshold::new()
    }

    fn clear(&mut self) {
        self.source.clear();
        self.metric.clear();
        self.abort_on_fail = ::std::option::Option::None;
        self.delay_abort_eval = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Threshold {
        static instance: Threshold = Threshold {
            source: ::std::string::String::new(),
            metric: ::std::string::String::new(),
            abort_on_fail: ::std::option::Option::None,
            delay_abort_eval: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Threshold {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Threshold").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Threshold {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Threshold {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  TestInfo is the root data structure for the data stored in the database.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:TestInfo)
pub struct TestInfo {
    // message fields
    // @@protoc_insertion_point(field:TestInfo.intervals)
    pub intervals: ::std::vec::Vec<Interval>,
    // @@protoc_insertion_point(field:TestInfo.summary)
    pub summary: ::protobuf::MessageField<Interval>,
    // @@protoc_insertion_point(field:TestInfo.console_messages)
    pub console_messages: ::std::vec::Vec<ConsoleMessage>,
    // @@protoc_insertion_point(field:TestInfo.thresholds)
    pub thresholds: ::std::vec::Vec<Threshold>,
    ///  Things such as limit alerts, etc. that are not console messages
    // @@protoc_insertion_point(field:TestInfo.messages)
    pub messages: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:TestInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TestInfo {
    fn default() -> &'a TestInfo {
        <TestInfo as ::protobuf::Message>::default_instance()
    }
}

impl TestInfo {
    pub fn new() -> TestInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "intervals",
            |m: &TestInfo| { &m.intervals },
            |m: &mut TestInfo| { &mut m.intervals },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Interval>(
            "summary",
            |m: &TestInfo| { &m.summary },
            |m: &mut TestInfo| { &mut m.summary },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "console_messages",
            |m: &TestInfo| { &m.console_messages },
            |m: &mut TestInfo| { &mut m.console_messages },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "thresholds",
            |m: &TestInfo| { &m.thresholds },
            |m: &mut TestInfo| { &mut m.thresholds },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "messages",
            |m: &TestInfo| { &m.messages },
            |m: &mut TestInfo| { &mut m.messages },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TestInfo>(
            "TestInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TestInfo {
    const NAME: &'static str = "TestInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.intervals.push(is.read_message()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.summary)?;
                },
                26 => {
                    self.console_messages.push(is.read_message()?);
                },
                34 => {
                    self.thresholds.push(is.read_message()?);
                },
                42 => {
                    self.messages.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.intervals {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.summary.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.console_messages {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.thresholds {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.messages {
            my_size += ::protobuf::rt::string_size(5, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.intervals {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.summary.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        for v in &self.console_messages {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        for v in &self.thresholds {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        for v in &self.messages {
            os.write_string(5, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TestInfo {
        TestInfo::new()
    }

    fn clear(&mut self) {
        self.intervals.clear();
        self.summary.clear();
        self.console_messages.clear();
        self.thresholds.clear();
        self.messages.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TestInfo {
        static instance: TestInfo = TestInfo {
            intervals: ::std::vec::Vec::new(),
            summary: ::protobuf::MessageField::none(),
            console_messages: ::std::vec::Vec::new(),
            thresholds: ::std::vec::Vec::new(),
            messages: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TestInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TestInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TestInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TestInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:DataPoint)
pub struct DataPoint {
    // message oneof groups
    pub data: ::std::option::Option<data_point::Data>,
    // special fields
    // @@protoc_insertion_point(special_field:DataPoint.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DataPoint {
    fn default() -> &'a DataPoint {
        <DataPoint as ::protobuf::Message>::default_instance()
    }
}

impl DataPoint {
    pub fn new() -> DataPoint {
        ::std::default::Default::default()
    }

    // .Interval interval = 1;

    pub fn interval(&self) -> &Interval {
        match self.data {
            ::std::option::Option::Some(data_point::Data::Interval(ref v)) => v,
            _ => <Interval as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_interval(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_interval(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(data_point::Data::Interval(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_interval(&mut self, v: Interval) {
        self.data = ::std::option::Option::Some(data_point::Data::Interval(v))
    }

    // Mutable pointer to the field.
    pub fn mut_interval(&mut self) -> &mut Interval {
        if let ::std::option::Option::Some(data_point::Data::Interval(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(data_point::Data::Interval(Interval::new()));
        }
        match self.data {
            ::std::option::Option::Some(data_point::Data::Interval(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_interval(&mut self) -> Interval {
        if self.has_interval() {
            match self.data.take() {
                ::std::option::Option::Some(data_point::Data::Interval(v)) => v,
                _ => panic!(),
            }
        } else {
            Interval::new()
        }
    }

    // .ConsoleMessage console_message = 2;

    pub fn console_message(&self) -> &ConsoleMessage {
        match self.data {
            ::std::option::Option::Some(data_point::Data::ConsoleMessage(ref v)) => v,
            _ => <ConsoleMessage as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_console_message(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_console_message(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(data_point::Data::ConsoleMessage(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_console_message(&mut self, v: ConsoleMessage) {
        self.data = ::std::option::Option::Some(data_point::Data::ConsoleMessage(v))
    }

    // Mutable pointer to the field.
    pub fn mut_console_message(&mut self) -> &mut ConsoleMessage {
        if let ::std::option::Option::Some(data_point::Data::ConsoleMessage(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(data_point::Data::ConsoleMessage(ConsoleMessage::new()));
        }
        match self.data {
            ::std::option::Option::Some(data_point::Data::ConsoleMessage(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_console_message(&mut self) -> ConsoleMessage {
        if self.has_console_message() {
            match self.data.take() {
                ::std::option::Option::Some(data_point::Data::ConsoleMessage(v)) => v,
                _ => panic!(),
            }
        } else {
            ConsoleMessage::new()
        }
    }

    // .Threshold threshold = 3;

    pub fn threshold(&self) -> &Threshold {
        match self.data {
            ::std::option::Option::Some(data_point::Data::Threshold(ref v)) => v,
            _ => <Threshold as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_threshold(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_threshold(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(data_point::Data::Threshold(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_threshold(&mut self, v: Threshold) {
        self.data = ::std::option::Option::Some(data_point::Data::Threshold(v))
    }

    // Mutable pointer to the field.
    pub fn mut_threshold(&mut self) -> &mut Threshold {
        if let ::std::option::Option::Some(data_point::Data::Threshold(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(data_point::Data::Threshold(Threshold::new()));
        }
        match self.data {
            ::std::option::Option::Some(data_point::Data::Threshold(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_threshold(&mut self) -> Threshold {
        if self.has_threshold() {
            match self.data.take() {
                ::std::option::Option::Some(data_point::Data::Threshold(v)) => v,
                _ => panic!(),
            }
        } else {
            Threshold::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Interval>(
            "interval",
            DataPoint::has_interval,
            DataPoint::interval,
            DataPoint::mut_interval,
            DataPoint::set_interval,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ConsoleMessage>(
            "console_message",
            DataPoint::has_console_message,
            DataPoint::console_message,
            DataPoint::mut_console_message,
            DataPoint::set_console_message,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Threshold>(
            "threshold",
            DataPoint::has_threshold,
            DataPoint::threshold,
            DataPoint::mut_threshold,
            DataPoint::set_threshold,
        ));
        oneofs.push(data_point::Data::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DataPoint>(
            "DataPoint",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DataPoint {
    const NAME: &'static str = "DataPoint";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.data = ::std::option::Option::Some(data_point::Data::Interval(is.read_message()?));
                },
                18 => {
                    self.data = ::std::option::Option::Some(data_point::Data::ConsoleMessage(is.read_message()?));
                },
                26 => {
                    self.data = ::std::option::Option::Some(data_point::Data::Threshold(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &data_point::Data::Interval(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &data_point::Data::ConsoleMessage(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &data_point::Data::Threshold(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &data_point::Data::Interval(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &data_point::Data::ConsoleMessage(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &data_point::Data::Threshold(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DataPoint {
        DataPoint::new()
    }

    fn clear(&mut self) {
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DataPoint {
        static instance: DataPoint = DataPoint {
            data: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DataPoint {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DataPoint").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DataPoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DataPoint {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `DataPoint`
pub mod data_point {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:DataPoint.data)
    pub enum Data {
        // @@protoc_insertion_point(oneof_field:DataPoint.interval)
        Interval(super::Interval),
        // @@protoc_insertion_point(oneof_field:DataPoint.console_message)
        ConsoleMessage(super::ConsoleMessage),
        // @@protoc_insertion_point(oneof_field:DataPoint.threshold)
        Threshold(super::Threshold),
    }

    impl ::protobuf::Oneof for Data {
    }

    impl ::protobuf::OneofFull for Data {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::DataPoint as ::protobuf::MessageFull>::descriptor().oneof_by_name("data").unwrap()).clone()
        }
    }

    impl Data {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Data>("data")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:StreamedData)
pub struct StreamedData {
    // message fields
    // @@protoc_insertion_point(field:StreamedData.data_points)
    pub data_points: ::std::vec::Vec<DataPoint>,
    // special fields
    // @@protoc_insertion_point(special_field:StreamedData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StreamedData {
    fn default() -> &'a StreamedData {
        <StreamedData as ::protobuf::Message>::default_instance()
    }
}

impl StreamedData {
    pub fn new() -> StreamedData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "data_points",
            |m: &StreamedData| { &m.data_points },
            |m: &mut StreamedData| { &mut m.data_points },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StreamedData>(
            "StreamedData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StreamedData {
    const NAME: &'static str = "StreamedData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.data_points.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.data_points {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.data_points {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StreamedData {
        StreamedData::new()
    }

    fn clear(&mut self) {
        self.data_points.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StreamedData {
        static instance: StreamedData = StreamedData {
            data_points: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StreamedData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StreamedData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StreamedData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StreamedData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:SinkType)
pub enum SinkType {
    // @@protoc_insertion_point(enum_value:SinkType.Counter)
    Counter = 0,
    // @@protoc_insertion_point(enum_value:SinkType.Gauge)
    Gauge = 1,
    // @@protoc_insertion_point(enum_value:SinkType.Trend)
    Trend = 2,
    // @@protoc_insertion_point(enum_value:SinkType.Rate)
    Rate = 3,
}

impl ::protobuf::Enum for SinkType {
    const NAME: &'static str = "SinkType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<SinkType> {
        match value {
            0 => ::std::option::Option::Some(SinkType::Counter),
            1 => ::std::option::Option::Some(SinkType::Gauge),
            2 => ::std::option::Option::Some(SinkType::Trend),
            3 => ::std::option::Option::Some(SinkType::Rate),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [SinkType] = &[
        SinkType::Counter,
        SinkType::Gauge,
        SinkType::Trend,
        SinkType::Rate,
    ];
}

impl ::protobuf::EnumFull for SinkType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("SinkType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for SinkType {
    fn default() -> Self {
        SinkType::Counter
    }
}

impl SinkType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<SinkType>("SinkType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0btypes.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\x8b\x01\n\x04\
    Sink\x12\x1d\n\x04type\x18\x01\x20\x01(\x0e2\t.SinkTypeR\x04type\x12)\n\
    \x06labels\x18\x02\x20\x03(\x0b2\x11.Sink.LabelsEntryR\x06labels\x1a9\n\
    \x0bLabelsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\
    \x05value\x18\x02\x20\x01(\x01R\x05value:\x028\x01\"\x8f\x01\n\x08Interv\
    al\x12\x16\n\x06period\x18\x01\x20\x01(\x05R\x06period\x12*\n\x05sinks\
    \x18\x02\x20\x03(\x0b2\x14.Interval.SinksEntryR\x05sinks\x1a?\n\nSinksEn\
    try\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x1b\n\x05value\x18\
    \x02\x20\x01(\x0b2\x05.SinkR\x05value:\x028\x01\"\xb0\x02\n\x0eConsoleMe\
    ssage\x12\x18\n\x07message\x18\x01\x20\x01(\tR\x07message\x12\x14\n\x05l\
    evel\x18\x02\x20\x01(\tR\x05level\x12A\n\x0efirst_occurred\x18\x03\x20\
    \x01(\x0b2\x1a.google.protobuf.TimestampR\rfirstOccurred\x12?\n\rlast_oc\
    curred\x18\x04\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x0clastOccur\
    red\x120\n\x05count\x18\x05\x20\x03(\x0b2\x1a.ConsoleMessage.CountEntryR\
    \x05count\x1a8\n\nCountEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\
    \x12\x14\n\x05value\x18\x02\x20\x01(\x05R\x05value:\x028\x01\"\xba\x01\n\
    \tThreshold\x12\x16\n\x06source\x18\x01\x20\x01(\tR\x06source\x12\x16\n\
    \x06metric\x18\x02\x20\x01(\tR\x06metric\x12'\n\rabort_on_fail\x18\x03\
    \x20\x01(\x08H\0R\x0babortOnFail\x88\x01\x01\x12-\n\x10delay_abort_eval\
    \x18\x04\x20\x01(\tH\x01R\x0edelayAbortEval\x88\x01\x01B\x10\n\x0e_abort\
    _on_failB\x13\n\x11_delay_abort_eval\"\xdc\x01\n\x08TestInfo\x12'\n\tint\
    ervals\x18\x01\x20\x03(\x0b2\t.IntervalR\tintervals\x12#\n\x07summary\
    \x18\x02\x20\x01(\x0b2\t.IntervalR\x07summary\x12:\n\x10console_messages\
    \x18\x03\x20\x03(\x0b2\x0f.ConsoleMessageR\x0fconsoleMessages\x12*\n\nth\
    resholds\x18\x04\x20\x03(\x0b2\n.ThresholdR\nthresholds\x12\x1a\n\x08mes\
    sages\x18\x05\x20\x03(\tR\x08messages\"\xa4\x01\n\tDataPoint\x12'\n\x08i\
    nterval\x18\x01\x20\x01(\x0b2\t.IntervalH\0R\x08interval\x12:\n\x0fconso\
    le_message\x18\x02\x20\x01(\x0b2\x0f.ConsoleMessageH\0R\x0econsoleMessag\
    e\x12*\n\tthreshold\x18\x03\x20\x01(\x0b2\n.ThresholdH\0R\tthresholdB\
    \x06\n\x04data\";\n\x0cStreamedData\x12+\n\x0bdata_points\x18\x01\x20\
    \x03(\x0b2\n.DataPointR\ndataPoints*7\n\x08SinkType\x12\x0b\n\x07Counter\
    \x10\0\x12\t\n\x05Gauge\x10\x01\x12\t\n\x05Trend\x10\x02\x12\x08\n\x04Ra\
    te\x10\x03J\xca\x10\n\x06\x12\x04\x03\0>\x01\n\xae\x01\n\x01\x0c\x12\x03\
    \x03\0\x122\xa3\x01\x20To\x20generate\x20rust\x20code\x20from\x20proto\
    \x20file\x20using\x20protoc,\x20run\x20the\x20following\x20command:\n\
    \x20protoc\x20--rust_out=.\x20--experimental_allow_proto3_optional\x20ty\
    pes.proto\x20&&\x20rm\x20mod.rs\n\n\t\n\x02\x03\0\x12\x03\x05\0)\n\n\n\
    \x02\x05\0\x12\x04\x07\0\x0c\x01\n\n\n\x03\x05\0\x01\x12\x03\x07\x05\r\n\
    \x0b\n\x04\x05\0\x02\0\x12\x03\x08\x04\x10\n\x0c\n\x05\x05\0\x02\0\x01\
    \x12\x03\x08\x04\x0b\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x08\x0e\x0f\n\
    \x0b\n\x04\x05\0\x02\x01\x12\x03\t\x04\x0e\n\x0c\n\x05\x05\0\x02\x01\x01\
    \x12\x03\t\x04\t\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\t\x0c\r\n\x0b\n\
    \x04\x05\0\x02\x02\x12\x03\n\x04\x0e\n\x0c\n\x05\x05\0\x02\x02\x01\x12\
    \x03\n\x04\t\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\n\x0c\r\n\x0b\n\x04\
    \x05\0\x02\x03\x12\x03\x0b\x04\r\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x03\
    \x0b\x04\x08\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x03\x0b\x0b\x0c\n\n\n\x02\
    \x04\0\x12\x04\x0e\0\x11\x01\n\n\n\x03\x04\0\x01\x12\x03\x0e\x08\x0c\n\
    \x0b\n\x04\x04\0\x02\0\x12\x03\x0f\x04\x16\n\x0c\n\x05\x04\0\x02\0\x06\
    \x12\x03\x0f\x04\x0c\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0f\r\x11\n\x0c\
    \n\x05\x04\0\x02\0\x03\x12\x03\x0f\x14\x15\n\x0b\n\x04\x04\0\x02\x01\x12\
    \x03\x10\x04#\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x10\x04\x17\n\x0c\n\
    \x05\x04\0\x02\x01\x01\x12\x03\x10\x18\x1e\n\x0c\n\x05\x04\0\x02\x01\x03\
    \x12\x03\x10!\"\n\n\n\x02\x04\x01\x12\x04\x13\0\x18\x01\n\n\n\x03\x04\
    \x01\x01\x12\x03\x13\x08\x10\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x14\x04\
    \x15\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x14\x04\t\n\x0c\n\x05\x04\x01\
    \x02\0\x01\x12\x03\x14\n\x10\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x14\
    \x13\x14\nE\n\x04\x04\x01\x02\x01\x12\x03\x17\x04\x20\x1a8\x20map<metric\
    \x20name,\x20value>\x20location\x20name\x20is\x20included\x20here\n\n\
    \x0c\n\x05\x04\x01\x02\x01\x06\x12\x03\x17\x04\x15\n\x0c\n\x05\x04\x01\
    \x02\x01\x01\x12\x03\x17\x16\x1b\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\
    \x17\x1e\x1f\n\n\n\x02\x04\x02\x12\x04\x1a\0!\x01\n\n\n\x03\x04\x02\x01\
    \x12\x03\x1a\x08\x16\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x1b\x04\x17\n\x0c\
    \n\x05\x04\x02\x02\0\x05\x12\x03\x1b\x04\n\n\x0c\n\x05\x04\x02\x02\0\x01\
    \x12\x03\x1b\x0b\x12\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x1b\x15\x16\n\
    \x0b\n\x04\x04\x02\x02\x01\x12\x03\x1c\x04\x15\n\x0c\n\x05\x04\x02\x02\
    \x01\x05\x12\x03\x1c\x04\n\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x1c\
    \x0b\x10\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x1c\x13\x14\n\x0b\n\x04\
    \x04\x02\x02\x02\x12\x03\x1d\x041\n\x0c\n\x05\x04\x02\x02\x02\x06\x12\
    \x03\x1d\x04\x1d\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\x1d\x1e,\n\x0c\
    \n\x05\x04\x02\x02\x02\x03\x12\x03\x1d/0\n\x0b\n\x04\x04\x02\x02\x03\x12\
    \x03\x1e\x040\n\x0c\n\x05\x04\x02\x02\x03\x06\x12\x03\x1e\x04\x1d\n\x0c\
    \n\x05\x04\x02\x02\x03\x01\x12\x03\x1e\x1e+\n\x0c\n\x05\x04\x02\x02\x03\
    \x03\x12\x03\x1e./\n,\n\x04\x04\x02\x02\x04\x12\x03\x20\x04!\x1a\x1f\x20\
    map<location,\x20times\x20occurred>\n\n\x0c\n\x05\x04\x02\x02\x04\x06\
    \x12\x03\x20\x04\x16\n\x0c\n\x05\x04\x02\x02\x04\x01\x12\x03\x20\x17\x1c\
    \n\x0c\n\x05\x04\x02\x02\x04\x03\x12\x03\x20\x1f\x20\n\n\n\x02\x04\x03\
    \x12\x04#\0(\x01\n\n\n\x03\x04\x03\x01\x12\x03#\x08\x11\n\x0b\n\x04\x04\
    \x03\x02\0\x12\x03$\x04\x16\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03$\x04\n\
    \n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03$\x0b\x11\n\x0c\n\x05\x04\x03\x02\
    \0\x03\x12\x03$\x14\x15\n\x0b\n\x04\x04\x03\x02\x01\x12\x03%\x04\x16\n\
    \x0c\n\x05\x04\x03\x02\x01\x05\x12\x03%\x04\n\n\x0c\n\x05\x04\x03\x02\
    \x01\x01\x12\x03%\x0b\x11\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03%\x14\
    \x15\n\x0b\n\x04\x04\x03\x02\x02\x12\x03&\x04$\n\x0c\n\x05\x04\x03\x02\
    \x02\x04\x12\x03&\x04\x0c\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\x03&\r\x11\
    \n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03&\x12\x1f\n\x0c\n\x05\x04\x03\
    \x02\x02\x03\x12\x03&\"#\n\x0b\n\x04\x04\x03\x02\x03\x12\x03'\x04)\n\x0c\
    \n\x05\x04\x03\x02\x03\x04\x12\x03'\x04\x0c\n\x0c\n\x05\x04\x03\x02\x03\
    \x05\x12\x03'\r\x13\n\x0c\n\x05\x04\x03\x02\x03\x01\x12\x03'\x14$\n\x0c\
    \n\x05\x04\x03\x02\x03\x03\x12\x03''(\nV\n\x02\x04\x04\x12\x04+\02\x01\
    \x1aJ\x20TestInfo\x20is\x20the\x20root\x20data\x20structure\x20for\x20th\
    e\x20data\x20stored\x20in\x20the\x20database.\n\n\n\n\x03\x04\x04\x01\
    \x12\x03+\x08\x10\n\x0b\n\x04\x04\x04\x02\0\x12\x03,\x04$\n\x0c\n\x05\
    \x04\x04\x02\0\x04\x12\x03,\x04\x0c\n\x0c\n\x05\x04\x04\x02\0\x06\x12\
    \x03,\r\x15\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03,\x16\x1f\n\x0c\n\x05\
    \x04\x04\x02\0\x03\x12\x03,\"#\n\x0b\n\x04\x04\x04\x02\x01\x12\x03-\x04\
    \x19\n\x0c\n\x05\x04\x04\x02\x01\x06\x12\x03-\x04\x0c\n\x0c\n\x05\x04\
    \x04\x02\x01\x01\x12\x03-\r\x14\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03-\
    \x17\x18\n\x0b\n\x04\x04\x04\x02\x02\x12\x03.\x041\n\x0c\n\x05\x04\x04\
    \x02\x02\x04\x12\x03.\x04\x0c\n\x0c\n\x05\x04\x04\x02\x02\x06\x12\x03.\r\
    \x1b\n\x0c\n\x05\x04\x04\x02\x02\x01\x12\x03.\x1c,\n\x0c\n\x05\x04\x04\
    \x02\x02\x03\x12\x03./0\n\x0b\n\x04\x04\x04\x02\x03\x12\x03/\x04&\n\x0c\
    \n\x05\x04\x04\x02\x03\x04\x12\x03/\x04\x0c\n\x0c\n\x05\x04\x04\x02\x03\
    \x06\x12\x03/\r\x16\n\x0c\n\x05\x04\x04\x02\x03\x01\x12\x03/\x17!\n\x0c\
    \n\x05\x04\x04\x02\x03\x03\x12\x03/$%\nN\n\x04\x04\x04\x02\x04\x12\x031\
    \x04!\x1aA\x20Things\x20such\x20as\x20limit\x20alerts,\x20etc.\x20that\
    \x20are\x20not\x20console\x20messages\n\n\x0c\n\x05\x04\x04\x02\x04\x04\
    \x12\x031\x04\x0c\n\x0c\n\x05\x04\x04\x02\x04\x05\x12\x031\r\x13\n\x0c\n\
    \x05\x04\x04\x02\x04\x01\x12\x031\x14\x1c\n\x0c\n\x05\x04\x04\x02\x04\
    \x03\x12\x031\x1f\x20\n\n\n\x02\x04\x05\x12\x044\0:\x01\n\n\n\x03\x04\
    \x05\x01\x12\x034\x08\x11\n\x0c\n\x04\x04\x05\x08\0\x12\x045\x049\x05\n\
    \x0c\n\x05\x04\x05\x08\0\x01\x12\x035\n\x0e\n\x0b\n\x04\x04\x05\x02\0\
    \x12\x036\x08\x1e\n\x0c\n\x05\x04\x05\x02\0\x06\x12\x036\x08\x10\n\x0c\n\
    \x05\x04\x05\x02\0\x01\x12\x036\x11\x19\n\x0c\n\x05\x04\x05\x02\0\x03\
    \x12\x036\x1c\x1d\n\x0b\n\x04\x04\x05\x02\x01\x12\x037\x08+\n\x0c\n\x05\
    \x04\x05\x02\x01\x06\x12\x037\x08\x16\n\x0c\n\x05\x04\x05\x02\x01\x01\
    \x12\x037\x17&\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x037)*\n\x0b\n\x04\
    \x04\x05\x02\x02\x12\x038\x08\x20\n\x0c\n\x05\x04\x05\x02\x02\x06\x12\
    \x038\x08\x11\n\x0c\n\x05\x04\x05\x02\x02\x01\x12\x038\x12\x1b\n\x0c\n\
    \x05\x04\x05\x02\x02\x03\x12\x038\x1e\x1f\n\n\n\x02\x04\x06\x12\x04<\0>\
    \x01\n\n\n\x03\x04\x06\x01\x12\x03<\x08\x14\n\x0b\n\x04\x04\x06\x02\0\
    \x12\x03=\x04'\n\x0c\n\x05\x04\x06\x02\0\x04\x12\x03=\x04\x0c\n\x0c\n\
    \x05\x04\x06\x02\0\x06\x12\x03=\r\x16\n\x0c\n\x05\x04\x06\x02\0\x01\x12\
    \x03=\x17\"\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03=%&b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(7);
            messages.push(Sink::generated_message_descriptor_data());
            messages.push(Interval::generated_message_descriptor_data());
            messages.push(ConsoleMessage::generated_message_descriptor_data());
            messages.push(Threshold::generated_message_descriptor_data());
            messages.push(TestInfo::generated_message_descriptor_data());
            messages.push(DataPoint::generated_message_descriptor_data());
            messages.push(StreamedData::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(SinkType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
